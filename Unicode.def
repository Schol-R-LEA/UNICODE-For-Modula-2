(* Copyright (C) 2024 Alice Osako,
   based on code Copyright (C) 2010 The Free Software Foundation, Inc. *)
(*
UNICODE for Modula-2 is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 3, or (at your option)
any later version.

UNICODE for Modula-2 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this package; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

(* This package is derived from an earlier incomplete package by Chris Lilley
   working for the Free Software Foundation in 2010. *)


DEFINITION MODULE Unicode ;

(*
    Title      : Unicode
    Authors    : Chris Lilley; Alice Osako
    System     : UNIX (GNU Modula-2)
    Date       : 2010-10-03 19:01:11
    Last edit  : $Date: 2024-03-07 15:37:21 $
    Revision   : $Version$
    Description: provides Unicode base types.
*)

CONST MaxUnicode = 10FFFFH;  (*maximum Unicode value *)

TYPE
    UChar;            (* a single Unicode character *)
    UString;          (* a string of UNICODE characters *)
    UTF32_codeunit;   (* a single UTF-32 code unit  *)
    TFEncodingType;   (* an enumeration of UNICODE encoding types *)

(*
   Uchar can hold any Unicode character. It is not restricted to
   the Basic Multilinual Plane (BMP). Each Unicode character has
   a unique codepoint between 0 and MaxUnicode; this value is
   published by the Unicode consortium.
   A Unicode character also has a name, and a set of associated
   character properties.

   UTF-32_codeunit holds a single code unit as used in the UNICODE
   Transformation Format, 32 bit. A codeunit is either a
   character in the BMP, a Low Surrogate, or a High Surrogate.
*)

PROCEDURE CharToUChar (c: CHAR): UChar;
(* 
   CharToUChar -   converts a single char, c, into a Unicode character.
                   For GM2, a Modula-2 char is a gcc char which is 8 bits.
                   The character represented by a CHAR with an ordinal
                   value greater than 127 depends on the locale.
                   The size and encoding of a Modula-2 char is undefined
                   in both PIM and ISO Modula-2.
*)

PROCEDURE ASCIIToUChar (a: CHAR): UChar;
(* 
   ASCIIToUChar -  converts a single ASCII printable char, a, into 
                   a Unicode character in the Basic Latin block.
                   For GM2, a Modula-2 char is a gcc char which is 8 bits;
                   printable ASCII values take up the lower half of the
                   codespace in GM2.
                   If the ordinal value of a is outside the printable
                   ASCII range, the Unicode character
                   'REPLACEMENT CHARACTER' is returned.
                   The size and encoding of a Modula-2 char is undefined 
                   in both PIM and ISO Modula-2.
*)

PROCEDURE CodepointToUChar (cp: CARDINAL): UChar;
(* 
   CodepointToUchar -   converts a numeric codepoint, cp, into a
                   Unicode character. For example the cardinal 3608, which
                   has the hexadecimal representation 0E18H, would return
                   the Unicode character THAI CHARACTER THO THONG.
*)

PROCEDURE IsBMP (cu: UTF32_codeunit): BOOLEAN;
(*
   IsBMP -         returns true if the UTF32_codeunit, cu, corresponds to
                   a Basic Multilingual Plane (BMP) Unicode character. 
                   Otherwise (cu is a low or high surrogate) returns false.
*)

PROCEDURE BMPToUChar (b: UTF32_codeunit): UChar;
(*
   BMPToUchar -    converts a single UTF32_codeunit within the BMP, b,
                   into a Unicode character. If b is not in the BMP 
                   but is a low or high surrogate, the Unicode character 
                   'REPLACEMENT CHARACTER' is returned.
*)


PROCEDURE SurrogatesToUChar (low, high: UTF32_codeunit): UChar;
(*
   SurrogatesToUchar - converts a pair of surrogate characters, low and high,
                   into a Unicode character. If low is outside the range 
                   for low surrogates and/or high is outside the range 
                   for high surrogates, the Unicode character 
                   'REPLACEMENT CHARACTER' is returned.
*)


PROCEDURE DetectEncoding(ustr: UString): TFEncodingType;
(*
   DetectEncoding - Determine the encoding of a UNICODE string.
*)


PROCEDURE UStringToUTF8String(UString ustr): UTF8String;
(*
   UStringToUTF8String - 
*)

END Unicode.